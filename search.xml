<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构与算法-双链表</title>
      <link href="2021/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8F%8C%E9%93%BE%E8%A1%A8/"/>
      <url>2021/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8F%8C%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>单链表只有一个后继指针，所以只能从前往后遍历，无法向前遍历寻找前面的结点。双链表除了有后继指针之外，还有一个<strong>指向前一个结点的前驱指针</strong>，这样既可以往后遍历，也可以往前遍历。</p></div><h2 id="双链表结点"><a href="#双链表结点" class="headerlink" title="双链表结点"></a>双链表结点</h2><p>双链表有两个指针域和一个数据域，数据域存放数据，两个指针域分别指向<strong>前驱结点</strong>和<strong>后继结点</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-单链表</title>
      <link href="2021/06/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
      <url>2021/06/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<div class="note flat"><p>数据结构讨论的是数据的存储方式，常用的数据结构分为两大类，一类是线性结构，一类是非线性结构。线性结构是一对一的关系，非线性结构是一对多，或者多对多的关系。链表，栈，队列等数据结构是线性结构；树，图等数据结构是非线性结构。</p></div><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是通过指针将一组零散的内存块串连在一起，我们称这个内存块为链表的结点。结点一般有指针域和数据域两个部分，不同类型的链表，指针域有所不同。</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>单链表是指每个结点<strong>有且只有一个后继指针</strong>指向下一个结点，并且最后一个结点的后继指针为 <strong>NULL</strong>。</p><p>链表中第一个结点称之为<strong>头结点</strong>，最后一个结点称之为<strong>尾结点</strong>。头结点用来记录链表的基地址，有了头结点，我们可以遍历整个链表；尾结点的后继指针为空，表示这是链表的最后一个结点。头结点不存放数据，只存放指向首结点的指针域，引入头结点的目的是为了方面链表的插入和删除操作。</p><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/linked-list.png" alt="单链表"></p><h3 id="结点"><a href="#结点" class="headerlink" title="结点"></a>结点</h3><p>单链表的结点由数据域和一个指向下一个结点的指针域组成。</p><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/node.png" alt="单链表结点"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ListNode 类定义了一个单链表的结点，id 和 name 是数据域，next 是指向下一个结点的指针域。下一个结点和当前结点一样都是 ListNode 类型。</p><h2 id="创建单链表"><a href="#创建单链表" class="headerlink" title="创建单链表"></a>创建单链表</h2><h3 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h3><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/head-insert.png" alt="头插法建立单链表"></p><p>头插法建立单链表是将每次创建的结点都插入到头结点后面，作为链表<strong>头结点后面的第一个结点</strong>。插入新结点时，<strong>要先将新插入结点的 next 指针先指向头结点的下一个结点，再将头结点的 next 指针指向新插入的结点</strong>。如果先将头结点的 next 指针指向了新插入的结点，就会导致链表断开，这样就找不到后面的结点了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头结点，辅助结点便于链表的操作</span></span><br><span class="line">ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 头插法：每次插入的结点成为链表中的第一个结点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> node 结点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">headCreateSingleLinkedList</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 链表为空，直接插入到头结点后面；链表不为空，新结点插入到非头结点的第一个结点前面</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 头结点next域指向新结点</span></span><br><span class="line">        head.next = node;</span><br><span class="line">        <span class="comment">// 结点的next域为空</span></span><br><span class="line">        node.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 新结点指向头结点的下一个结点</span></span><br><span class="line">        node.next = head.next;</span><br><span class="line">        <span class="comment">// 头结点指向新结点，新结点成为新的非头结点之外的第一个结点</span></span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h3><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/tail-insert.png" alt="尾插法建立单链表"></p><p>尾插法建立单链表是将每次创建的结点依次链接在前一个结点的后面，作为链表的<strong>尾结点</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头结点，辅助结点便于链表的操作</span></span><br><span class="line">ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 尾插法：每次插入的结点成为链表中的最后一个结点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> node 结点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tailCreateSingleLinkedList</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 辅助变量用来找到最后一个结点</span></span><br><span class="line">    ListNode temp = head;</span><br><span class="line">    <span class="comment">// 循环遍历找到最后一个结点</span></span><br><span class="line">    <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将新的结点链接到最后</span></span><br><span class="line">    temp.next = node;</span><br><span class="line">    <span class="comment">// 最后一个结点的next域为空</span></span><br><span class="line">    node.next = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入结点"><a href="#插入结点" class="headerlink" title="插入结点"></a>插入结点</h2><p>链表插入结点不需要像数组一样移动元素，只需要修改待插入位置相邻结点的指针即可。</p><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/insert-node.png" alt="插入结点"></p><p>链表插入结点的时间复杂度为 O(1)，但是链表在插入元素前需要先找到待插入的位置，而单链表只能从头结点开始按顺序往下依次查找，所以查找的时间复杂度为 O(n)，综合来看，**单链表插入结点的时间复杂度为 O(n)**。</p><p>链表在插入结点时，<strong>要先将待插入结点的 next 指针指向待插入位置的下一个结点</strong>，然后将前一个结点的 next 指针指向待插入的结点。如果先将待插入位置前一个结点的 next 指针先指向了 待插入的结点，就会造成链表断开，后面的结点就丢失了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 插入结点，在给定索引位置后插入</span></span><br><span class="line"><span class="comment">  * 先将要插入的结点的next域指向要插入位置的下一个结点</span></span><br><span class="line"><span class="comment">  * 再将要插入位置前的结点的next域指向要插入的结点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index 结点索引</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> node 待插入的结点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListNode</span><span class="params">(<span class="keyword">int</span> index, ListNode node)</span> </span>&#123;</span><br><span class="line">    ListNode temp = head;</span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 头结点为空，链表不存在</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表不存在，无法插入！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 索引为负数，或者大于链表长度无法插入</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt; singleLinkedListLength() || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结点插入位置非法！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在头结点后面插入</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        headCreateSingleLinkedList(node);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 任意其他位置插入</span></span><br><span class="line">    <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 索引位置后移</span></span><br><span class="line">        position++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">        <span class="comment">// 找到要插入的位置</span></span><br><span class="line">        <span class="keyword">if</span> (position == index) &#123;</span><br><span class="line">            <span class="comment">// 要插入的结点先连接到后一个结点，否则链表会断开</span></span><br><span class="line">            node.next = temp.next;</span><br><span class="line">            temp.next = node;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h2><p>删除结点只需要将要删除结点的前一个结点的 next 指针直接指向要删除结点的下一个结点即可。</p><p><img src="/postimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E9%93%BE%E8%A1%A8/delete-node.png" alt="删除结点"></p><p>和插入结点相同，删除结点的时间复杂度为 O(1)，但是查询要删除的结点时间复杂度为 O(n)，所以**删除结点的时间复杂度还是 O(n)**。</p><p>插入结点只需要找到要插入的结点位置的结点即可，删除结点需要找到待删除的结点和它的前一个结点，因为需要将前一个结点的 next 指针指向待删除结点的下一个结点。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除结点，根据指定的名称删除</span></span><br><span class="line"><span class="comment">  * 找到要删除结点的位置和前一个位置，将前一个位置的next域指向要删除结点的下一个结点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> name 结点名称</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteListNode</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 到删除的结点</span></span><br><span class="line">    ListNode deleteNode;</span><br><span class="line">    <span class="comment">// 辅助变量找到删除结点的位置</span></span><br><span class="line">    ListNode temp1 = head;</span><br><span class="line">    <span class="comment">// 辅助变量找到删除结点的前一个位置</span></span><br><span class="line">    ListNode temp2 = head;</span><br><span class="line">    <span class="comment">// 找到结点标志位</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 要删除的结点位置索引</span></span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 要删除的结点前一个结点的位置索引</span></span><br><span class="line">    <span class="keyword">int</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 链表不存在</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表不存在，无法删除！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有头结点</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表为空，无法删除！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到要删除的结点位置</span></span><br><span class="line">    <span class="keyword">while</span> (temp1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        position++;</span><br><span class="line">        temp1 = temp1.next;</span><br><span class="line">        <span class="comment">// 找到结点</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(temp1.name)) &#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;没找到要删除的结点！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有一个非头结点之外的结点</span></span><br><span class="line">    <span class="keyword">if</span> (position == <span class="number">1</span> &amp;&amp; singleLinkedListLength() == <span class="number">1</span>) &#123;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到要删除结点的前一个位置</span></span><br><span class="line">    <span class="keyword">while</span> (temp2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 要删除的结点指向前一个结点的下一个位置</span></span><br><span class="line">        deleteNode = temp2.next;</span><br><span class="line">        <span class="keyword">if</span> (previous == position-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 删除最后一个结点</span></span><br><span class="line">            <span class="keyword">if</span> (position == singleLinkedListLength()) &#123;</span><br><span class="line">                temp2.next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将前一个位置的next域指向下一个结点</span></span><br><span class="line">            temp2.next = deleteNode.next;</span><br><span class="line">            <span class="comment">// 删除结点的next域置空</span></span><br><span class="line">            deleteNode.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        previous++;</span><br><span class="line">        temp2 = temp2.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的应用"><a href="#单链表的应用" class="headerlink" title="单链表的应用"></a>单链表的应用</h2><h3 id="反转单链表"><a href="#反转单链表" class="headerlink" title="反转单链表"></a>反转单链表</h3><p>单链表反转，将链表结点按顺序依次取下，按照<strong>头插法</strong>依次插入到一个新的头结点后面，再把原来的头结点指向指向新的头结点的下一个结点即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头结点，辅助结点便于链表的操作</span></span><br><span class="line">ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 反转单链表</span></span><br><span class="line"><span class="comment">  * new一个新的头节点，将原来的链表上的节点一个一个取下，按头插法插入新的头节点后面</span></span><br><span class="line"><span class="comment">  * 最后把原来的头节点指向新的头节点的next域</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reserveSingleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 链表为空或者只有一个节点，不用反转</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无须反转！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 要反转的节点</span></span><br><span class="line">    ListNode current = head.next;</span><br><span class="line">    <span class="comment">// 记录当前要反转节点的下一个节点</span></span><br><span class="line">    ListNode next;</span><br><span class="line">    <span class="comment">// 定义一个新的头节点</span></span><br><span class="line">    ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 反转前记录下当前节点的下一个节点位置</span></span><br><span class="line">        next = current.next;</span><br><span class="line">        <span class="comment">// 当前节点插入到新的头节点的后面</span></span><br><span class="line">        current.next = newHead.next;</span><br><span class="line">        <span class="comment">// 往后移动一个位置继续下一个节点的反转</span></span><br><span class="line">        newHead.next = current;</span><br><span class="line">        current = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原来的头节点指向新的头节点</span></span><br><span class="line">    head.next = newHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序单链表"><a href="#合并两个有序单链表" class="headerlink" title="合并两个有序单链表"></a>合并两个有序单链表</h3><p>如果两个链表都不为空，依次比较大小，将较小的一个节点插入到头结点的后面，如果只有一个链表不为空，直接插到链表最后面。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 合并两个有序链表</span></span><br><span class="line"><span class="comment">  * 如果两个链表都不为空，依次比较大小，将较小的一个节点插入到头结点的后面</span></span><br><span class="line"><span class="comment">  * 如果只有一个链表不为空，直接插到链表最后面</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> list 链表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSingleLinkedList</span><span class="params">(SingleLinkedList list)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指向当前链表的头结点</span></span><br><span class="line">    ListNode p = <span class="keyword">this</span>.head;</span><br><span class="line">    <span class="comment">// 指向当前链表头节点的下一个节点</span></span><br><span class="line">    ListNode p1 = <span class="keyword">this</span>.head.next;</span><br><span class="line">    <span class="comment">// 指向第二个量表头节点的下一个节点</span></span><br><span class="line">    ListNode p2 = list.head.next;</span><br><span class="line">    <span class="comment">// 两个链表都不为空</span></span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span> &amp;&amp; p2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 把id小的那个链表的节点挂在p后面</span></span><br><span class="line">        <span class="keyword">if</span> (p1.id &gt; p2.id) &#123;</span><br><span class="line">            p.next = p2;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.next = p1;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// p往后移动一个位置</span></span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 链表1多余的节点挂在p后面</span></span><br><span class="line">    <span class="keyword">if</span> (p1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p.next = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 链表2多余的节点挂在p后面</span></span><br><span class="line">    <span class="keyword">if</span> (p2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p.next = p2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除倒数第k个结点"><a href="#删除倒数第k个结点" class="headerlink" title="删除倒数第k个结点"></a>删除倒数第k个结点</h3><p>倒数第 k 个结点是正数第 n-k+1 个结点，找到删除节点的前一个节点，将前一个节点指向要删除节点的下一个节点。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除倒数第k个元素</span></span><br><span class="line"><span class="comment">  * 倒数第k个节点是正数第n-k+1个节点</span></span><br><span class="line"><span class="comment">  * 找到删除节点的前一个节点，将前一个节点指向要删除节点的下一个节点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> k 删除元素的倒数位置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteKFromLastNode</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指向头节点</span></span><br><span class="line">    ListNode p1 = head;</span><br><span class="line">    <span class="comment">// 指向头节点的下一个节点</span></span><br><span class="line">    ListNode p2 = head.next;</span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (p2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 倒数第k个节点的位置</span></span><br><span class="line">    <span class="keyword">int</span> length = singleLinkedListLength() - k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 记录当前节点的位置</span></span><br><span class="line">        position++;</span><br><span class="line">        <span class="comment">// 当前节点等于倒数第k个节点</span></span><br><span class="line">        <span class="keyword">if</span> (length == position) &#123;</span><br><span class="line">            <span class="comment">// 删除倒数第k个节点</span></span><br><span class="line">            p1.next = p2.next;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 往后移动继续寻找</span></span><br><span class="line">        p2 = p2.next;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也可以用<strong>双指针</strong>实现，复杂度更低。</p><h3 id="获取单链表中间结点"><a href="#获取单链表中间结点" class="headerlink" title="获取单链表中间结点"></a>获取单链表中间结点</h3><p>使用双指针遍历，两个指针距离两个位置，当前面的指针到达链表尾部时，后面一个指针指向的位置就是中间节点的位置。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取单链表的中间节点</span></span><br><span class="line"><span class="comment">  * 使用双指针遍历，两个指针距离两个位置，当前面的指针到达链表尾部时，</span></span><br><span class="line"><span class="comment">  * 后面一个指针指向的位置就是中间节点的位置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMiddleNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个辅助变量寻找中间节点</span></span><br><span class="line">    ListNode p1 = head.next;</span><br><span class="line">    <span class="comment">// 第二个辅助变量</span></span><br><span class="line">    ListNode p2;</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p2 = p1.next;</span><br><span class="line">    <span class="keyword">if</span> (p2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;只有一个节点！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前面指针的next不为空就继续遍历</span></span><br><span class="line">    <span class="keyword">while</span> (p2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 后面的指针往后移动一个位置</span></span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        <span class="comment">// 如果前面一个指针的后面只有一个节点，则遍历结束</span></span><br><span class="line">        <span class="keyword">if</span> (p2.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 前面的指针移动两个位置</span></span><br><span class="line">        p2 = p2.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;链表的中间节点为&quot;</span> + p1.id + <span class="string">&quot;,名称为&quot;</span> + p1.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-复杂度分析</title>
      <link href="2021/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>2021/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>我们都知道，设计数据结构和算法是为了让程序<strong>跑的更快、性能更好，同时能节省空间</strong>。所以算法的执行效率是一个非常重要的考量指标，一般这个指标我们可以通过分析<code>时间复杂度</code>和<code>空间复杂度</code>来衡量。</p></div><h2 id="为什么需要复杂度分析"><a href="#为什么需要复杂度分析" class="headerlink" title="为什么需要复杂度分析"></a>为什么需要复杂度分析</h2><p>代码写完后在机器上执行一遍，我们就能知道算法执行的时间和占用的内存，为什么还要做复杂度分析呢？因为这种方式测算的结果有非常大的局限性。</p><ol><li>测试结果依赖测试环境</li></ol><p>直接执行代码统计的结果很大程度上依赖于测试所使用的环境。同样一段代码，在十年前破旧的电脑上执行和现在最新，配置最高的电脑上执行，时间肯定是不一样的。都是最新的电脑，Intel 和 AMD 的处理器跑出来的结果也可能不一样。这样，程序的性能就受到了环境的影响，并不能准确的反映出程序的好坏。</p><ol start="2"><li>测试结果受数据规模的影响大</li></ol><p>测试数据规模的不同，测试的结果相差很大。测试数据规模太小，测试结果可能无法真实地反应算法的性能。</p><p>所以，我们需要一个方法，不用具体的数据测试就可以粗略的判断算法的执行效率。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>算法的执行效率，简单的说，就是<strong>代码执行的时间</strong>。在不执行代码的情况下，通过计算每一行<strong>代码执行的次数</strong>来估计代码的执行时间，这里我们假设每行代码执行的时间是相同的。</p><p>举个例子，先看下面这段代码的执行次数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">         sum += i;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二行执行了一次，第三行执行了 n 次，第四行和第五行执行了 n 的平方次，所以这段代码执行了 $2n^2$+n+1 次，代码执行的总时间是与 n 成正比的，我们可以用一个公式来表示：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">T</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">f</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="number">2</span><span class="variable">n</span><span class="operator">^</span><span class="number">2</span><span class="operator">+</span><span class="variable">n</span><span class="operator">+</span><span class="number">1</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>当 n 足够大时，后面的整数可以忽略不计，由于是粗略的估计，所以我们只取表达式中最大的量级来表示代码的时间复杂度。上面的公式可以简写成：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">T</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">n</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>即我们可以说上面那段代码的时间复杂度为<code>O(n^2)</code>。</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><h4 id="只关注循环最多次数的代码"><a href="#只关注循环最多次数的代码" class="headerlink" title="只关注循环最多次数的代码"></a>只关注循环最多次数的代码</h4><p>上面说了我们只取量级最大的代表时间复杂度。所以求算法的时间复杂度，<strong>最关键的就是计算出循环次数最多的那段代码执行的次数</strong>。</p><p>对于上面那段代码，我们只需要求出<code>sum += i;</code>这一行代码执行的次数，就可以计算出代码的时间复杂度。</p><h4 id="加法原则"><a href="#加法原则" class="headerlink" title="加法原则"></a>加法原则</h4><p>一个程序中有多个代码块时，总的复杂度等于<strong>量级最大的那段代码的复杂度</strong>，我们可以用公式表示：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">T</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="variable">T1</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">+</span><span class="variable">T2</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">f</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">g</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">max</span><span class="punctuation">(</span><span class="variable">f</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">,</span><span class="variable">g</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>举个栗子，下面这段代码中的时间复杂度就是根据加法原则用最大量级的复杂度代表程序的复杂度。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum1 += i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum2 += i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            sum3 += j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum1+sum2+sum3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中三个代码块的时间复杂度分别是常量时间，O(n) 和 O($n^2$) 。根据前面说的，当 n 足够大时，常量和 O(n) 可以忽略不计，所有这段代码的时间复杂度为 O($n^2$) 。</p><h4 id="乘法原则"><a href="#乘法原则" class="headerlink" title="乘法原则"></a>乘法原则</h4><p>和加法原则类似，当代码中存在嵌套代码时，<strong>时间复杂度等于嵌套代码内外的复杂度乘积</strong>。用公式表示：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">T</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="variable">T1</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">*</span><span class="variable">T2</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">f</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">*</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">g</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">f</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">*</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">g</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>这里也举个栗子，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ret += add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先把 sum() 函数的求和语言看成一个普通的计算，sum() 的时间复杂度是 O(n)，然后再考虑调用 add() 函数，add() 函数的时间复杂度也是 O(n)，计算时需要把 add() 的时间复杂度考虑进去，所以这段代码的时间复杂度是 o($n^2$) 。</p><h4 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h4><ol><li>一般，我们常见的复杂度大小有 O(n)，O($n^2$)，O($log^n$)，O($nlog^n$)， O($2^n$)，O(n!) 等。它们的大小关系为：</li></ol><p><strong>O(1) &lt; O($log^n$) &lt; O(n) &lt; O($nlog^n$) &lt; O($n^2$) &lt; O($2^n$) &lt; O(n!) &lt; O($n^n$)</strong></p><ol start="2"><li>常见的时间复杂度有<strong>最好时间复杂度</strong>，<strong>最坏时间复杂度</strong>和<strong>平均时间复杂度</strong>。</li></ol><h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>空间复杂度和时间复杂度基本相同，是<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。我们也可以用一个公式表示：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">S</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="built_in">O</span><span class="punctuation">(</span><span class="variable">g</span><span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多终端使用hexo发布博客</title>
      <link href="2021/05/04/%E5%A4%9A%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/"/>
      <url>2021/05/04/%E5%A4%9A%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="note warning flat"><p>数据备份在现在这个互联网时代，是必必必…须要重视的事情。肉眼可见的设备坏了可以再换，数据丢了就再也找不回来了😤。</p></div><p>之前，我们只需要在本地部署了 hexo 博客，然后就可以写博客推送到码云，这样别人就可以通过外网来访问我们的博客了。但是如果我们部署 hexo 的电脑坏了或者想在其他电脑上写博客，这样就不能比较麻烦了。</p><p>我们可以将本地的 hexo 的相关源文件上传到另外一个仓库，这样在不同的电脑上，只要拉取这个仓库的文件，然后再安装相关插件就可以进行多终端写博客了。</p><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>在<a href="https://gitee.com/">码云</a>上新建一个<strong>私有</strong>仓库，存放 hexo 的主题，博客和其他源文件。这里仓库<strong>一定要建私有的</strong>，因为我们部署的源文件中有一些信息是我们的私密信息。</p><h2 id="推送到私有仓库"><a href="#推送到私有仓库" class="headerlink" title="推送到私有仓库"></a>推送到私有仓库</h2><p>在 hexo 根目录打开<code>git bash</code></p><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h3 id="添加到本地仓库"><a href="#添加到本地仓库" class="headerlink" title="添加到本地仓库"></a>添加到本地仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;backup source file.&quot;</span><br></pre></td></tr></table></figure><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push --set-upstream git@gitee.com:ximingze/xxx.git master</span><br></pre></td></tr></table></figure><h2 id="在其他终端写博客"><a href="#在其他终端写博客" class="headerlink" title="在其他终端写博客"></a>在其他终端写博客</h2><h3 id="拉取远程仓库文件"><a href="#拉取远程仓库文件" class="headerlink" title="拉取远程仓库文件"></a>拉取远程仓库文件</h3><p>新建一个文件夹，打开<code>git bash</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@gitee.com:ximingze/xxx.git</span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在<code>git bash</code>中依次安装插件，不需要执行<code>hexo init</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>新建博客文件，编写博客，完成之后发布即可。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitee </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本自动登录telnet</title>
      <link href="2020/12/25/shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95telnet/"/>
      <url>2020/12/25/shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95telnet/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>公司项目采用C程序开发，有些设置需要登录到<code>telnet</code>上面去操作，但是现场部署上线之后，有一百多台虚机，如果全部手动去操作，太麻烦了🙃…使用 shell 写个脚本，就可以自动去登录操作了。</p></div><p>登录不同的主机，可以有两种方式，一种把 IP 地址放在<strong>字符串</strong>中，另外一种放在文件中。</p><h2 id="读取字符串方式"><a href="#读取字符串方式" class="headerlink" title="读取字符串方式"></a>读取字符串方式</h2><p>把 IP 地址放在字符串中，这种适合 IP 地址少的，如果 IP 地址太多，写代码的时候比较麻烦。</p><h3 id="配置-IP-和-PORT"><a href="#配置-IP-和-PORT" class="headerlink" title="配置 IP 和 PORT"></a>配置 IP 和 PORT</h3><ul><li>字符串之间用空格隔开</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hosts=(&quot;192.168.1.48&quot; &quot;192.168.1.49&quot; &quot;192.168.1.50&quot; &quot;192.168.1.51&quot; &quot;192.168.1.52&quot;)</span><br><span class="line">port=(&quot;12041&quot; &quot;12042&quot; &quot;12043&quot; &quot;12044&quot; &quot;12045&quot;)</span><br></pre></td></tr></table></figure><h3 id="循环登录"><a href="#循环登录" class="headerlink" title="循环登录"></a>循环登录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for (( i=0;i&lt;$&#123;#hosts[*]&#125;; i++))</span><br><span class="line">do</span><br><span class="line">    (</span><br><span class="line">    sleep 1</span><br><span class="line">    echo -e &quot;$&#123;username&#125;\r\n&quot;</span><br><span class="line">    sleep 1</span><br><span class="line">    echo -e &quot;$&#123;password&#125;\r\n&quot;</span><br><span class="line">    sleep 1</span><br><span class="line">    # 这里可以进行登录之后的操作</span><br><span class="line">    sleep 1</span><br><span class="line">    echo -e &quot;exit\r\n&quot;</span><br><span class="line">    )|timeout 10  telnet $&#123;hosts[$i]&#125; $&#123;port[$i]&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="读取文件方式"><a href="#读取文件方式" class="headerlink" title="读取文件方式"></a>读取文件方式</h2><p>如果要登录的服务器太多，最好是把 IP 都放入一个文件中，每行一个 IP 和 PORT，然后读取文件。</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><ul><li>hosts.txt</li></ul><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">192.168.1.48,12041</span><br><span class="line">192.168.1.49,12042</span><br></pre></td></tr></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for ips in $hosts</span><br><span class="line">do</span><br><span class="line">    (</span><br><span class="line">    echo -e &quot;$&#123;username&#125;\r\n&quot;</span><br><span class="line">    echo -e &quot;$&#123;password&#125;\r\n&quot;</span><br><span class="line">    echo -e &quot;:display-icp-state;\r\n&quot;</span><br><span class="line">    sleep 1</span><br><span class="line">    echo -e &quot;exit\r\n&quot;</span><br><span class="line">    ) | telnet $&#123;ips%,*&#125; $&#123;ips#*,&#125;</span><br><span class="line">    # 截取，前面的部分</span><br><span class="line">    #echo $&#123;ips%,*&#125;</span><br><span class="line">    # 截取，后面的部分</span><br><span class="line">    #echo $&#123;ips#*,&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题配置—butterfly</title>
      <link href="2020/11/29/hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E2%80%94butterfly/"/>
      <url>2020/11/29/hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E2%80%94butterfly/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><code>hexo</code>默认的主题实在是不好看，好在有大量的开发者和爱好者开发了很多的主题，非常感谢他们😁，这样我们就可以选择自己喜欢的主题进行部署配置了。官方教程请参考<a href="https://butterfly.js.org/">主题开发者博客</a>。</p><p>本配置基于butterfly主题3.7.1版本。</p></div><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><ul><li>在<code>hexo</code>的根目录下，右键<code>git bash here</code>，直接克隆主题</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><ul><li>在<code>_config.yml</code>文件中修改主题名称</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ul><li>如果系统没有<code>pug</code>和<code>stylus</code>渲染器，需要安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="配置升级"><a href="#配置升级" class="headerlink" title="配置升级"></a>配置升级</h3><ul><li>butterfly 主题需要将该主题目录下的<code>butterfly.yml</code>复制到<code>hexo</code>安装的<strong>根目录</strong>，改名为<code>_config.butterfly.yml</code></li></ul><p>主题的配置全部都在<code>_config.butterfly.yml</code>配置文件中修改，hexo 会自动合并<code>config.yml</code>和<code>_config.butterfly.yml</code>里的配置，如果存在同名的配置，会优先使用<code>_config.butterfly.yml</code>里的配置。</p><h2 id="分页设置"><a href="#分页设置" class="headerlink" title="分页设置"></a>分页设置</h2><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page tags</code>，会在<code>source</code>目录下生成<code>tags/index.md</code>文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2020-11-23 21:56:15</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page categories，会在</code>source<code>目录下生成</code>categories/index.md`文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2020-11-23 21:58:54</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><h3 id="说说页"><a href="#说说页" class="headerlink" title="说说页"></a>说说页</h3><h4 id="创建说说页面"><a href="#创建说说页面" class="headerlink" title="创建说说页面"></a>创建说说页面</h4><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page talking</code>，会在<code>source</code>目录下生成<code>talking/index.md</code>文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 说说</span><br><span class="line">date: 2020-11-29 14:35:28</span><br><span class="line">type: artitalk</span><br><span class="line">top<span class="emphasis">_img: http://pic1.win4000.com/wallpaper/2020-11-10/5faa3d45a8aba.jpg</span></span><br></pre></td></tr></table></figure><h4 id="配置说说插件"><a href="#配置说说插件" class="headerlink" title="配置说说插件"></a>配置说说插件</h4><p>🍁 后续补充</p><h3 id="图库页"><a href="#图库页" class="headerlink" title="图库页"></a>图库页</h3><h4 id="创建图库页面"><a href="#创建图库页面" class="headerlink" title="创建图库页面"></a>创建图库页面</h4><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page photo</code>，会在<code>source</code>目录下生成<code>photo/index.md</code>文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 图片</span><br><span class="line">date: 2020-12-05 15:56:12</span><br><span class="line">type: &quot;photo&quot;</span><br><span class="line">top<span class="emphasis">_img: http://pic1.win4000.com/m00/9a/b2/5dc1a89ef0addc329fd8872dc2abf988.jpg</span></span><br></pre></td></tr></table></figure><h4 id="配置页面"><a href="#配置页面" class="headerlink" title="配置页面"></a>配置页面</h4><ul><li>使用<code>外挂标签</code>在<code>index.md</code>文件中配置图库页面，外挂标签需要在主题中配置</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>图库名称</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应的子相册地址</td></tr><tr><td>url</td><td>图库封面图片地址</td></tr></tbody></table><p>比如我的图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src='http://p5.qhimg.com/bdm/480_296_0/t0187398ac9bc36c05e.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href='/photo/wallpaper'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src='http://pic1.win4000.com/m00/10/62/8a3376a805c0249140f0039c390ce41d.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">动漫</div>  <p>卡哇伊</p>  <a href='/photo/kawai'></a>  </figcaption>  </figure>  </div>#### 子页面配置<ol><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page xxx</code>，会在<code>source</code>目录下生成<code>xxx/index.md</code>文件</li><li>把生成的 xxx 目录放入到 <strong>photo</strong> 目录下，修改 xxx 目录下的 <strong>index.md</strong> 文件</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: wallpaper</span><br><span class="line">date: 2020-12-05 19:16:07</span><br><span class="line">type: &quot;photo&quot;</span><br><span class="line">top<span class="emphasis">_img: http://pic1.win4000.com/m00/ef/f1/60aacd27946d77ac607da4e9916daf89.jpg</span></span><br></pre></td></tr></table></figure><ol><li>使用外挂标签，放入你想放入的图片地址</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">图片地址</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h3 id="音乐页"><a href="#音乐页" class="headerlink" title="音乐页"></a>音乐页</h3><h4 id="开启音乐插件"><a href="#开启音乐插件" class="headerlink" title="开启音乐插件"></a>开启音乐插件</h4><p>在主题的配置文件中，<code>enable</code>设为<code>true</code>和<code>per_page</code>设为<code>true</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="插入Aplayer-html"><a href="#插入Aplayer-html" class="headerlink" title="插入Aplayer html"></a>插入Aplayer html</h4><p>把<code>aplayer代码</code>插入到主题配置文件的<code>inject.bottom</code>去。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;5436134451&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;true&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><h4 id="依赖要求"><a href="#依赖要求" class="headerlink" title="依赖要求"></a>依赖要求</h4><p>如果无法正常显示播放器，可能是<code>js</code>文件版本过低</p><ol><li>APlayer.js &gt; 1.8.0</li><li>Meting.js &gt; 1.1.1</li></ol><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li>在<code>_config.yml</code>文件中配置 <code>aplayer</code></li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="创建音乐页面"><a href="#创建音乐页面" class="headerlink" title="创建音乐页面"></a>创建音乐页面</h4><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page music</code>，会在<code>source</code>目录下生成<code>music/index.md</code>文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 音乐</span><br><span class="line">date: 2020-12-10 22:02:49</span><br><span class="line">type: &quot;music&quot;</span><br></pre></td></tr></table></figure><h4 id="添加歌单"><a href="#添加歌单" class="headerlink" title="添加歌单"></a>添加歌单</h4><ul><li>以外挂标签的方式在<code>music/index.md</code>文件中添加歌单</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;84718802&quot; &quot;netease&quot; &quot;playlist&quot; &quot;volume:0.5&quot; &quot;theme:#49A6F9&quot; &quot;mutex:true&quot; %&#125;</span><br></pre></td></tr></table></figure><ul><li>歌单参数列表</li></ul><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>必须值</td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td>必须值</td><td>音乐平台: <code>netease</code>, <code>tencent</code>,<code>kugou</code>,<code>xiami</code>,<code>baidu</code></td></tr><tr><td>type</td><td>必须值</td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table><h3 id="豆瓣页"><a href="#豆瓣页" class="headerlink" title="豆瓣页"></a>豆瓣页</h3><p>豆瓣页面，主要展示个人豆瓣读书，观影和游戏清单，详细参考<a href="https://github.com/mythsman/hexo-douban">hexo-douban 官网</a></p><h4 id="安装插件-2"><a href="#安装插件-2" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li>在<code>_config.yml</code>中配置以下内容</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">douban:</span><br><span class="line">  user: mythsman</span><br><span class="line">  builtin: false</span><br><span class="line">  book:</span><br><span class="line"><span class="code">    title: &#x27;This is my book title&#x27;</span></span><br><span class="line"><span class="code">    quote: &#x27;This is my book quote&#x27;</span></span><br><span class="line"><span class="code">  movie:</span></span><br><span class="line"><span class="code">    title: &#x27;This is my movie title&#x27;</span></span><br><span class="line"><span class="code">    quote: &#x27;This is my movie quote&#x27;</span></span><br><span class="line"><span class="code">  game:</span></span><br><span class="line"><span class="code">    title: &#x27;This is my game title&#x27;</span></span><br><span class="line"><span class="code">    quote: &#x27;This is my game quote&#x27;</span></span><br><span class="line"><span class="code">  timeout: 10000 </span></span><br></pre></td></tr></table></figure><ol><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/&quot;">https://www.douban.com/people/xxxxxx/&quot;</a> ，其中的”xxxxxx”就是你的个人ID了</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code></li><li><strong>title</strong>: 该页面的标题</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点</li></ol><h4 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h4><ul><li>使用<code>hexo douban</code>命令即可生成指定页面，如果不加参数，那么默认参数为<code>-bgm</code></li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">hexo douban -h</span><br><span class="line">Usage: hexo douban</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">Generate pages from douban</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -b, --books   Generate douban books only</span><br><span class="line">  -g, --games   Generate douban games only</span><br><span class="line">  -m, --movies  Generate douban movies only</span><br></pre></td></tr></table></figure><p>安装了<code>hexo douban</code>之后，就不能用<code>hexo d</code>发布推送了，因为<code>hexo douban</code>跟<code>hexo deploy</code>的前缀都是<code>hexo d</code></p><h4 id="菜单配置"><a href="#菜单配置" class="headerlink" title="菜单配置"></a>菜单配置</h4><ul><li><code>_config.butterfly.yml</code>文件中配置菜单</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line"><span class="code">    书单: /book/ || fas fa-book</span></span><br><span class="line"><span class="code">    电影: /movie/ || fas fa-video</span></span><br></pre></td></tr></table></figure><h3 id="友情链接页"><a href="#友情链接页" class="headerlink" title="友情链接页"></a>友情链接页</h3><h4 id="创建友情链接页"><a href="#创建友情链接页" class="headerlink" title="创建友情链接页"></a>创建友情链接页</h4><ul><li>在<code>hexo</code>根目录打开<code>git</code>，输入<code>hexo new page link</code>，会在<code>source</code>目录下生成<code>link/index.md</code>文件，修改文件</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 友情链接</span><br><span class="line">date: 2020-11-23 21:59:47</span><br><span class="line">type: &quot;link&quot;</span><br></pre></td></tr></table></figure><h4 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h4><ul><li>在 hexo 的<code>source/_data</code>目录中，创建一个文件<code>link.yml</code></li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 友情链接</span></span><br><span class="line"><span class="emphasis">  class_</span>desc: 那些人，那些事</span><br><span class="line">  link<span class="emphasis">_list:</span></span><br><span class="line"><span class="emphasis">    - name: laughing</span></span><br><span class="line"><span class="emphasis">      link: https://ximingze.gitee.io</span></span><br><span class="line"><span class="emphasis">      avatar: https://jerryc.me/image/avatar.png</span></span><br><span class="line"><span class="emphasis">      descr: 今日事,今日毕</span></span><br><span class="line"><span class="emphasis">    - name: Hexo</span></span><br><span class="line"><span class="emphasis">      link: https://hexo.io/zh-tw/</span></span><br><span class="line"><span class="emphasis">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line"><span class="emphasis">      descr: 快速、简单且强大的网誌框架</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- class_</span>name: 网站</span><br><span class="line">  class<span class="emphasis">_desc: 值得推荐的网站</span></span><br><span class="line"><span class="emphasis">  link_</span>list:</span><br><span class="line"><span class="bullet">    -</span> name: Youtube</span><br><span class="line"><span class="code">      link: https://www.youtube.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line"><span class="code">      descr: 视频网站</span></span><br><span class="line"><span class="code">    - name: Weibo</span></span><br><span class="line"><span class="code">      link: https://www.weibo.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line"><span class="code">      descr: 中国最大社交分享平台</span></span><br><span class="line"><span class="code">    - name: Twitter</span></span><br><span class="line"><span class="code">      link: https://twitter.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line"><span class="code">      descr: 社交分享平台</span></span><br></pre></td></tr></table></figure><h4 id="友情链接页面设置"><a href="#友情链接页面设置" class="headerlink" title="友情链接页面设置"></a>友情链接页面设置</h4><ol><li><code>class_name</code>和<code>class_desc</code>支持<code>html</code>格式书写，如不需要，也可以留空。</li><li>友情链接界面可以由用户自己自定义，只需要在友情链接的 md 文档设置就行，以普通的 <strong>Markdown 格式</strong>书写。</li></ol><h3 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h3><ul><li>主题中内置了 404 页面，直接开启即可</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># A simple 404 page</span></span><br><span class="line">error<span class="emphasis">_404:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  subtitle: &quot;页面没有找到&quot;</span></span><br><span class="line"><span class="emphasis">  background: </span></span><br></pre></td></tr></table></figure><h3 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h3><h4 id="安装本地搜索插件"><a href="#安装本地搜索插件" class="headerlink" title="安装本地搜索插件"></a>安装本地搜索插件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h4 id="修改搜索配置"><a href="#修改搜索配置" class="headerlink" title="修改搜索配置"></a>修改搜索配置</h4><ul><li>在<code>_config.butterfly.yml</code>文件中开放搜索配置</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">  <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">  <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># 如果没有查到内容相关内容显示</span></span><br></pre></td></tr></table></figure><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>修改站点配置文件 <code>_config.yml</code>，默认是英语。本主题支持 en，zh-CN，zh-TW。</p><h3 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h3><p>网站各种资料信息，例如标题、副标题和邮箱等个人资料，在博客根目录的<code>_config.yml</code>文件中修改。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">恰似你的温柔</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;往事已成空，还如一梦中&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;千山暮雪，只影向谁去&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&#x27;互联网，开发，java，linux&#x27;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">laughing</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h3><p>修改主题配置文件<code>_config.butterfly.yml</code>，必须是 <code>/xxx/</code>，后面<code>||</code>分开，然后写图标名。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">说说:</span> <span class="string">/talking/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comments</span></span><br><span class="line">  <span class="string">图片:</span> <span class="string">/photo/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">  <span class="string">娱乐||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">视频:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code-1"><i class="fas fa-check-circle"></i>默认主题</button></li><li class="tab"><button type="button" data-href="#code-2"><i class="fas fa-cog"></i>自定义主题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code-1"><p><code>Butterfly</code> 支持6种代码高亮样式：</p><ul><li>darker</li><li>pale night</li><li>light</li><li>ocean</li><li>mac</li><li>mac light</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code-2"><p>主题从3.0开始，支持使用自定义的代码顔色。</p><p>如何自定义主题，请查看下面这篇文章。</p><p><a href="https://butterfly.js.org/posts/b37b5fe3/">自定義代碼配色 | Butterfly</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><h4 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h4><p>修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="代码块开闭"><a href="#代码块开闭" class="headerlink" title="代码块开闭"></a>代码块开闭</h4><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击<code>&gt;</code>可展开代码。</p><ul><li>true 全部代码框不展开，需点击<code>&gt;</code>打开</li><li>false 代码狂展开，有<code>&gt;</code>点击按钮</li><li>none 不显示<code>&gt;</code>按钮</li></ul><p>修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 &#x27;&gt;&#x27; 打开</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>你也可以在post/page页对应的markdown文件front-matter添加highlight_shrink来独立配置。</p><p>当<strong>主题配置文件中</strong>的 <code>highlight_shrink</code> 设为true时，可在front-matter添加<code>highlight_shrink: false</code>来单独配置文章展开代码框。</p><p>当<strong>主题配置文件中</strong>的 <code>highlight_shrink</code> 设为false时，可在front-matter添加<code>highlight_shrink: true</code>来单独配置文章收缩代码框。</p></div><h4 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h4><p>在默认情况下，Hexo 在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能。</p><p>修改主题配置文件<code>_config.butterfly.yml</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果你是使用 highlight 渲染，需要找到你站点的 Hexo 配置文件<code>_config.yml</code>，将<code>line_number</code>改成<code>false</code>:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure><p>如果你是使用 prismjs 渲染，需要找到你站点的 Hexo 配置文件<code>_config.yml</code>，将<code>line_number</code>改成<code>false</code>:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="代码高度限制"><a href="#代码高度限制" class="headerlink" title="代码高度限制"></a>代码高度限制</h4><p>可配置代码高度限制，超出的部分会隐藏，并显示展开按钮。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span> <span class="comment"># unit: px</span></span><br></pre></td></tr></table></figure><div class="note info flat"><ol><li>单位是 <code>px</code>，直接添加数字，如 200</li><li>实际限制高度为 <code>highlight_height_limit + 30 px</code> ，多增加 30px 限制，目的是避免代码高度只超出highlight_height_limit 一点时，出现展开按钮，展开没内容。</li><li>不适用于隐藏后的代码块（ css 设置 display: none）</li></ol></div><h3 id="社交图片"><a href="#社交图片" class="headerlink" title="社交图片"></a>社交图片</h3><p>书写格式 <code>图标名：url || 描述性文字</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xxxxx</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:xxxxxx@gmail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><p>🍁 后续补充</p><h2 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h2><p>如何新建博客，在 <a href="https://ximingze.gitee.io/2020/11/22/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">码云gitee部署hexo个人博客</a> 这篇博客中已经说明…</p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><p>博客除了有正文之外，还有其他的一些设置，需要在博客的<code>md</code>文件的头部以<code>---</code>分割的区域进行配置，有两种设置可以选择：<code>Page Front-matter</code>和<code>Post Front-matter</code>。根据参数自己配置即可。</p><ul><li>Page Front-matter</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和cs</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><ul><li>Post Front-matter</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">aside:</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><h3 id="博客加密"><a href="#博客加密" class="headerlink" title="博客加密"></a>博客加密</h3><h4 id="安装插件-3"><a href="#安装插件-3" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><h4 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li>在<code>_config.yml</code>文件中配置加密配置</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安全</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">这里有东西被加密了，需要输入密码查看哦。</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">抱歉,</span> <span class="string">这里需要输入密码才能阅读哦~</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码A</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码B</span>&#125;</span><br><span class="line">  <span class="attr">template:</span> <span class="string">&lt;div</span> <span class="string">id=&quot;hexo-blog-encrypt&quot;</span> <span class="string">data-wpm=&quot;&#123;&#123;hbeWrongPassMessage&#125;&#125;&quot;</span> <span class="string">data-whm=&quot;&#123;&#123;hbeWrongHashMessage&#125;&#125;&quot;&gt;&lt;div</span> <span class="string">class=&quot;hbe-input-container&quot;&gt;&lt;input</span> <span class="string">type=&quot;password&quot;</span> <span class="string">id=&quot;hbePass&quot;</span> <span class="string">placeholder=&quot;&#123;&#123;hbeMessage&#125;&#125;&quot;</span> <span class="string">/&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div</span> <span class="string">class=&quot;bottom-line&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script</span> <span class="string">id=&quot;hbeData&quot;</span> <span class="string">type=&quot;hbeData&quot;</span> <span class="string">data-hmacdigest=&quot;&#123;&#123;hbeHmacDigest&#125;&#125;&quot;&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">哦豁,</span> <span class="string">这个密码看着不太对呢,</span> <span class="string">请联系博主再试试吧~</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br></pre></td></tr></table></figure><ul><li>在要加密的博客头部区域配置加密选项</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> 加密文章tag</span><br><span class="line">password: xxx</span><br><span class="line">abstract: 这里有东西被加密了，需要输入密码查看哦。</span><br><span class="line">message: 抱歉, 这里需要输入密码才能阅读哦~</span><br><span class="line">wrong<span class="emphasis">_pass_</span>message: 哦豁, 这个密码看着不太对呢, 请联系博主再试试吧~</span><br><span class="line">wrong<span class="emphasis">_hash_</span>message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span><br></pre></td></tr></table></figure><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><h5 id="插件方式"><a href="#插件方式" class="headerlink" title="插件方式"></a>插件方式</h5><ul><li>插入网络图片直接按照<code>markdown</code>语法格式插入即可，插入本地图片需要<strong>安装插件</strong></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure><ul><li>修改<code>_config.yml</code>文件<code>post_asset_folder</code>值为<code>true</code></li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">post_asset_folder:true</span></span><br></pre></td></tr></table></figure><p>修改为<code>true</code>之后，用命令创建博客文件时，会在同目录下生成一个跟博客同名的文件夹，博客中要插入的本地问题都存放在该文件夹中。详细说明参考<a href="https://hexo.io/zh-cn/docs">hexo官方说明文档</a> 。</p><ul><li>插入图片使用的格式不是插入在线图片的格式</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 图片名称 图片描述 %&#125;</span><br></pre></td></tr></table></figure><h5 id="本地方式"><a href="#本地方式" class="headerlink" title="本地方式"></a>本地方式</h5><p>在主题的 <strong>source</strong> 目录下新建一个文件夹，专门用来放写博客的图片。部署之后，在 public 目录下会生成之前放的图片，博客中的图片地址写 public 中图片路径（/postimg/hello/xxx.jpg），在外网中就可以直接看到图片，public 路径下的文件会传到 gitee。</p><p>🚀 未完，有空补充…😂</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>码云gitee部署hexo个人博客</title>
      <link href="2018/11/22/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2018/11/22/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><code>Hexo</code>搭建个人博客部署到<code>码云gitee</code>是非常方便的，而且访问速度很快，之前在<code>github</code>上部署过，但是国内访问响应速度太慢。</p></div><h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h2><p>搭建<code>hexo</code>博客之前，需要先安装所需要的依赖工具：<code>Node.js</code>和<code>Git</code></p><h3 id="node-js-安装"><a href="#node-js-安装" class="headerlink" title="node.js 安装"></a>node.js 安装</h3><p>在<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">node.js 官网</a> 下载最新稳定版本的 node.js 文件，然后双击安装</p><h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3><p>在 <a href="https://git-scm.com/download/win">git 官网</a> 下载最新稳定版本的 git 文件，然后双击安装</p><h2 id="安装部署-hexo"><a href="#安装部署-hexo" class="headerlink" title="安装部署 hexo"></a>安装部署 hexo</h2><h3 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>新建一个文件夹存放用来存放<code>hexo</code>配置，然后单击鼠标右键，选择<code>git bash here</code></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ul><li>在<code>git bash</code>中输入命令初始化<code>hexo</code>，路径为存放<code>hexo</code>的路径</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h3><p>安装完成后，先在本地测试是否安装成功</p><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h4><ul><li>在浏览器中访问<a href="localhost:4000">localhost:4000</a> ,如果能看到默认的页面就部署成功了</li></ul><p><img src="/postimg/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hello-world.png" alt="hello world"></p><h2 id="部署博客到码云gitee"><a href="#部署博客到码云gitee" class="headerlink" title="部署博客到码云gitee"></a>部署博客到码云gitee</h2><p><code>gitee</code>是国内的网站，无论是自己编写博客提交的响应，还是访问博客的速度都非常快，而<code>github</code>是国外的网站，所以访问速度会很慢，有时候还加载不出来，所以我选择部署到<code>gitee</code>。</p><h3 id="新建博客项目"><a href="#新建博客项目" class="headerlink" title="新建博客项目"></a>新建博客项目</h3><ul><li>博客项目名称要和码云的用户名相同</li></ul><p><img src="/postimg/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ximingze.png" alt="新建仓库"></p><h3 id="关联项目到-hexo"><a href="#关联项目到-hexo" class="headerlink" title="关联项目到 hexo"></a>关联项目到 hexo</h3><ul><li>复制项目的<code>https</code>地址，配置到<code>hexo</code>根目录下的<code>_config.yml</code>文件中</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitee.com/ximingze/ximingze.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="关联码云帐号到-git"><a href="#关联码云帐号到-git" class="headerlink" title="关联码云帐号到 git"></a>关联码云帐号到 git</h3><ol><li>在<code>hexo</code>根目录点击鼠标右键，选择<code>git bash here</code></li><li>配置<code>gitee</code>帐号</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;码云帐号&quot;</span><br><span class="line">git config --global user.email &quot;码云邮箱&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>hexo</code>根目录初始化 git</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="部署-hexo-到码云"><a href="#部署-hexo-到码云" class="headerlink" title="部署 hexo 到码云"></a>部署 hexo 到码云</h3><ol><li>安装部署插件</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>部署 hexo</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ol start="3"><li>输入<code>gitee</code>帐号密码</li></ol><h3 id="启用码云-page-服务"><a href="#启用码云-page-服务" class="headerlink" title="启用码云 page 服务"></a>启用码云 page 服务</h3><ul><li>在项目页面，点击服务，选择<code>Gitee Pages</code></li></ul><p><img src="/postimg/%E7%A0%81%E4%BA%91gitee%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitee-pages.png" alt="Gitee Page"></p><ul><li>勾选强制使用<code>https</code>，点击更新</li></ul><h3 id="配置-SSH-公钥"><a href="#配置-SSH-公钥" class="headerlink" title="配置 SSH 公钥"></a>配置 SSH 公钥</h3><p><code>Gitee</code>提供了基于 SSH 协议的 Git 服务，在使用 SSH 协议访问仓库仓库之前，需要先配置好账户/仓库的<code>SSH公钥</code></p><ol><li>生成 sshkey</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;</span><br></pre></td></tr></table></figure><p>这里的<code>xxxxx@xxxxx.com</code>只是生成的 sshkey 的名称，并不约束或要求具体命名为某个邮箱</p><p>按照提示完成三次回车，即可生成 ssh key</p><ol start="2"><li>添加 sshkey 到仓库中</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制生成后的 ssh key，通过仓库主页 <strong>「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」</strong> ，添加生成的 public key 添加到仓库中</p><ol start="3"><li>验证是否添加成功</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T laughing@gitee.com</span><br></pre></td></tr></table></figure><p>首次使用需要确认并添加主机到本机SSH可信列表。若返回 <code>Hi XXX! You&#39;ve successfully authenticated, but Gitee.com does not provide shell access.</code> 内容，则证明添加成功。</p><h2 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h2><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><ul><li>使用 hexo 命令生成一个 md 文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;title&quot;</span><br></pre></td></tr></table></figure><p>生成的文件在<code>/source/_posts</code>目录下，”title” 就是博客的名称</p><h3 id="编写博客-1"><a href="#编写博客-1" class="headerlink" title="编写博客"></a>编写博客</h3><p>博客正文的编写，按照<code>markdown</code>语法的格式编写即可，具体的一些细节请参考<a href="https://ximingze.gitee.io/2020/11/29/hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-butterfly/">hexo主题配置—butterfly</a></p><h3 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h3><ol><li>清除缓存</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><ol start="2"><li>重新生成静态文件并发布到码云</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>码云的 gitee pages 服务<strong>不能自动更新</strong>，需要自己手动去更新，稍微有点麻烦，每次更新了博客之后，都要手动去码云上再更新一次 gitee pages 服务。</p><div class="note warning flat"><p>最近又把博客搬到了 github，因为码云每次发布博客都要自动更新 gitee pages，很麻烦；然后最近想要更新博客的时候发现，码云在弄什么绿色网络环境改造，三个月不能用 gitee pages，太蛋疼了。</p></div>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
